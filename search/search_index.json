{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Robot Development Extensions for URDF This Visual Studio Code extension helps you buid Universal Robot Description Format (URDF) files for your robot. This extension does not require ROS to be installed in order to edit and visualize URDF files. Features Export to Isaac Simulation 3D inline Preview of URDF files Visualize the robot in 3D Visualize the robot's joints and links axis and rotation parameters Visualize the robot's collision and visual geometries \"Explode\" the robot's joints to see the robot's internal structure 3D preview Link Visualization Joint Visualization Color Customization Camera Controls Gizmos for exploring a URDF Syntax highlighting Code completion Collision Visualization Schema Validation AI Assisted Coding prompts fpr Github Copilot Virtual Reality preview of the model you are editing. (New!) (Preview) Supports OpenSCAD Rendering and syntax Highlighting for programatically creating robot parts. (New!) (Preview) Exposes an MCP Server allowing AI to check its work visually. Virtual Reality preview of the model you are editing. Coming soon Physics Emulation Kinematics Visualization External URDF / Xacro References Usage Open a URDF file Right click on the file and select \"Preview URDF\", or press Ctrl+Shift+P and select \"Preview URDF\" Acknowledgements This extension is rebranded and re-released by Ranch Hand Robotics, owned by the maintainer of the ms-iot VSCode ROS Extension with permission from Microsoft. The source extension was split into 3 parts - ROS 1 , ROS 2 and a URDF editor .","title":"Home"},{"location":"index.html#robot-development-extensions-for-urdf","text":"This Visual Studio Code extension helps you buid Universal Robot Description Format (URDF) files for your robot. This extension does not require ROS to be installed in order to edit and visualize URDF files.","title":"Robot Development Extensions for URDF"},{"location":"index.html#features","text":"Export to Isaac Simulation 3D inline Preview of URDF files Visualize the robot in 3D Visualize the robot's joints and links axis and rotation parameters Visualize the robot's collision and visual geometries \"Explode\" the robot's joints to see the robot's internal structure 3D preview Link Visualization Joint Visualization Color Customization Camera Controls Gizmos for exploring a URDF Syntax highlighting Code completion Collision Visualization Schema Validation AI Assisted Coding prompts fpr Github Copilot Virtual Reality preview of the model you are editing. (New!) (Preview) Supports OpenSCAD Rendering and syntax Highlighting for programatically creating robot parts. (New!) (Preview) Exposes an MCP Server allowing AI to check its work visually. Virtual Reality preview of the model you are editing.","title":"Features"},{"location":"index.html#coming-soon","text":"Physics Emulation Kinematics Visualization External URDF / Xacro References","title":"Coming soon"},{"location":"index.html#usage","text":"Open a URDF file Right click on the file and select \"Preview URDF\", or press Ctrl+Shift+P and select \"Preview URDF\"","title":"Usage"},{"location":"index.html#acknowledgements","text":"This extension is rebranded and re-released by Ranch Hand Robotics, owned by the maintainer of the ms-iot VSCode ROS Extension with permission from Microsoft. The source extension was split into 3 parts - ROS 1 , ROS 2 and a URDF editor .","title":"Acknowledgements"},{"location":"OpenSCAD.html","text":"OpenSCAD Preview and Language Support OpenSCAD is a powerful tool for creating 3D models programmatically. This section covers how the URDF editor integrates OpenSCAD support, including file handling, previewing, and language features. OpenSCAD File Handling The URDF editor can open and edit .scad files directly. When a .scad file is opened, the editor provides syntax highlighting and basic editing features. OpenSCAD Preview The editor includes a preview feature for OpenSCAD files. When a .scad file is saved, the editor automatically converts it to STL format using the openscad-wasm-prebuilt module. The generated STL file is then displayed in the 3D viewer. OpenSCAD Language Features The editor provides several language features for OpenSCAD: Syntax Highlighting : Basic syntax highlighting is available for OpenSCAD code. Code Snippets : Common OpenSCAD patterns are available as code snippets. Error Reporting : The editor reports syntax errors in OpenSCAD code. OpenSCAD Library Support : The editor recognizes and provides support for standard OpenSCAD libraries. OpenSCAD Library Configuration The extension automatically loads OpenSCAD libraries from OS-specific default locations: - Windows : %USERPROFILE%\\Documents\\OpenSCAD\\libraries - Linux : $HOME/.local/share/OpenSCAD/libraries - macOS : $HOME/Documents/OpenSCAD/libraries To add custom library paths: 1. Open VS Code settings ( Ctrl+, ) 2. Search for \"urdf-editor.OpenSCADLibraryPaths\" 3. Add additional library directories (supports ${workspace} variable) Example settings.json: { \"urdf-editor.OpenSCADLibraryPaths\" : [ \"${workspace}/scad_libs\" , \"C:\\\\MyLibraries\\\\OpenSCAD\" , \"/usr/local/share/openscad/libraries\" ] } OpenSCAD Documentation Generation The extension can automatically generate documentation for your OpenSCAD libraries: Open the command palette ( Ctrl+Shift+P ) Run \"URDF: Generate OpenSCAD Libraries Documentation\" Choose where to save the markdown file The extension will scan all library paths and extract: Header comments from library files Module and function signatures Parameter documentation Usage examples This documentation is also available to AI assistants via the Model Context Protocol (MCP) for intelligent code completion and suggestions. AI-Assisted Development Features The URDF Editor provides advanced AI integration to enhance your OpenSCAD development workflow. These features leverage modern AI capabilities to make 3D modeling more intuitive and efficient. Visual Feedback Loop Screenshot Integration : The editor can automatically capture screenshots of your 3D models and provide them to AI assistants for visual analysis Real-time Preview : AI can see exactly what your OpenSCAD code produces, enabling contextual suggestions and corrections Visual Debugging : When your model doesn't look right, AI can analyze the rendered output and suggest code improvements Model Context Protocol (MCP) Integration The editor includes a built-in MCP server that exposes powerful tools for AI assistants: take_screenshot : Captures high-quality screenshots of active OpenSCAD previews for AI analysis take_screenshot_by_filename : Takes targeted screenshots of specific files, automatically opening previews as needed get_openscad_libraries : Provides comprehensive documentation of available OpenSCAD libraries, modules, and functions AI-Powered Development Workflow Write or describe your 3D model requirements in natural language Generate code using AI assistance with full library context Preview instantly with optimized fast rendering (preview mode) Get visual feedback through automatic screenshot analysis Iterate rapidly with AI suggestions based on rendered output Performance Optimizations for AI Workflow Fast Preview Mode : All OpenSCAD files render in optimized preview mode by default (10x faster) Automatic Performance Settings : Injected optimization settings ( $fn=8 , $fa=12 , $fs=2 ) for quick iteration Cancellable Operations : Long-running renders can be interrupted instantly 1-minute Timeout : Quick feedback prevents workflow interruption This integrated approach enables a new style of \"visual programming\" where AI can understand both your code intent and the actual 3D output, creating a powerful feedback loop for rapid prototyping and design iteration. Acknowledgements Special thanks to the OpenSCAD community for their work. Thank you to @lorenzowritescode for the the prebuilt OpenSCAD WASM module.","title":"OpenSCAD"},{"location":"OpenSCAD.html#openscad-preview-and-language-support","text":"OpenSCAD is a powerful tool for creating 3D models programmatically. This section covers how the URDF editor integrates OpenSCAD support, including file handling, previewing, and language features.","title":"OpenSCAD Preview and Language Support"},{"location":"OpenSCAD.html#openscad-file-handling","text":"The URDF editor can open and edit .scad files directly. When a .scad file is opened, the editor provides syntax highlighting and basic editing features.","title":"OpenSCAD File Handling"},{"location":"OpenSCAD.html#openscad-preview","text":"The editor includes a preview feature for OpenSCAD files. When a .scad file is saved, the editor automatically converts it to STL format using the openscad-wasm-prebuilt module. The generated STL file is then displayed in the 3D viewer.","title":"OpenSCAD Preview"},{"location":"OpenSCAD.html#openscad-language-features","text":"The editor provides several language features for OpenSCAD: Syntax Highlighting : Basic syntax highlighting is available for OpenSCAD code. Code Snippets : Common OpenSCAD patterns are available as code snippets. Error Reporting : The editor reports syntax errors in OpenSCAD code. OpenSCAD Library Support : The editor recognizes and provides support for standard OpenSCAD libraries.","title":"OpenSCAD Language Features"},{"location":"OpenSCAD.html#openscad-library-configuration","text":"The extension automatically loads OpenSCAD libraries from OS-specific default locations: - Windows : %USERPROFILE%\\Documents\\OpenSCAD\\libraries - Linux : $HOME/.local/share/OpenSCAD/libraries - macOS : $HOME/Documents/OpenSCAD/libraries To add custom library paths: 1. Open VS Code settings ( Ctrl+, ) 2. Search for \"urdf-editor.OpenSCADLibraryPaths\" 3. Add additional library directories (supports ${workspace} variable) Example settings.json: { \"urdf-editor.OpenSCADLibraryPaths\" : [ \"${workspace}/scad_libs\" , \"C:\\\\MyLibraries\\\\OpenSCAD\" , \"/usr/local/share/openscad/libraries\" ] }","title":"OpenSCAD Library Configuration"},{"location":"OpenSCAD.html#openscad-documentation-generation","text":"The extension can automatically generate documentation for your OpenSCAD libraries: Open the command palette ( Ctrl+Shift+P ) Run \"URDF: Generate OpenSCAD Libraries Documentation\" Choose where to save the markdown file The extension will scan all library paths and extract: Header comments from library files Module and function signatures Parameter documentation Usage examples This documentation is also available to AI assistants via the Model Context Protocol (MCP) for intelligent code completion and suggestions.","title":"OpenSCAD Documentation Generation"},{"location":"OpenSCAD.html#ai-assisted-development-features","text":"The URDF Editor provides advanced AI integration to enhance your OpenSCAD development workflow. These features leverage modern AI capabilities to make 3D modeling more intuitive and efficient.","title":"AI-Assisted Development Features"},{"location":"OpenSCAD.html#visual-feedback-loop","text":"Screenshot Integration : The editor can automatically capture screenshots of your 3D models and provide them to AI assistants for visual analysis Real-time Preview : AI can see exactly what your OpenSCAD code produces, enabling contextual suggestions and corrections Visual Debugging : When your model doesn't look right, AI can analyze the rendered output and suggest code improvements","title":"Visual Feedback Loop"},{"location":"OpenSCAD.html#model-context-protocol-mcp-integration","text":"The editor includes a built-in MCP server that exposes powerful tools for AI assistants: take_screenshot : Captures high-quality screenshots of active OpenSCAD previews for AI analysis take_screenshot_by_filename : Takes targeted screenshots of specific files, automatically opening previews as needed get_openscad_libraries : Provides comprehensive documentation of available OpenSCAD libraries, modules, and functions","title":"Model Context Protocol (MCP) Integration"},{"location":"OpenSCAD.html#ai-powered-development-workflow","text":"Write or describe your 3D model requirements in natural language Generate code using AI assistance with full library context Preview instantly with optimized fast rendering (preview mode) Get visual feedback through automatic screenshot analysis Iterate rapidly with AI suggestions based on rendered output","title":"AI-Powered Development Workflow"},{"location":"OpenSCAD.html#performance-optimizations-for-ai-workflow","text":"Fast Preview Mode : All OpenSCAD files render in optimized preview mode by default (10x faster) Automatic Performance Settings : Injected optimization settings ( $fn=8 , $fa=12 , $fs=2 ) for quick iteration Cancellable Operations : Long-running renders can be interrupted instantly 1-minute Timeout : Quick feedback prevents workflow interruption This integrated approach enables a new style of \"visual programming\" where AI can understand both your code intent and the actual 3D output, creating a powerful feedback loop for rapid prototyping and design iteration.","title":"Performance Optimizations for AI Workflow"},{"location":"OpenSCAD.html#acknowledgements","text":"Special thanks to the OpenSCAD community for their work. Thank you to @lorenzowritescode for the the prebuilt OpenSCAD WASM module.","title":"Acknowledgements"},{"location":"Support.html","text":"Support If you encounter any issues with this extension, the following resources are provided: Github Issues Bugs and feature requests are handled through Github Issues in the Repository . If you find that you are hitting the same issue as someone else, please give a :+1: or comment on an existing issue. Please provide as much details as possible, including an isolated reproduction of the issue or a pointer to an online repository. Discussions Github Discussions are provided for community driven general guidance, walkthroughs, or support. Sponsored Support If you are looking for more direct support or would like to help cover costs associated with building and releasing this extension, Ranch Hand Robotics offers sponsored support for this extension. This includes direct support from the developers.","title":"Support"},{"location":"Support.html#support","text":"If you encounter any issues with this extension, the following resources are provided:","title":"Support"},{"location":"Support.html#github-issues","text":"Bugs and feature requests are handled through Github Issues in the Repository . If you find that you are hitting the same issue as someone else, please give a :+1: or comment on an existing issue. Please provide as much details as possible, including an isolated reproduction of the issue or a pointer to an online repository.","title":"Github Issues"},{"location":"Support.html#discussions","text":"Github Discussions are provided for community driven general guidance, walkthroughs, or support.","title":"Discussions"},{"location":"Support.html#sponsored-support","text":"If you are looking for more direct support or would like to help cover costs associated with building and releasing this extension, Ranch Hand Robotics offers sponsored support for this extension. This includes direct support from the developers.","title":"Sponsored Support"},{"location":"WebXRPreview.html","text":"WebXR URDF The Robot Developer Extension for URDF allows previewing a URDF file in Virtual Reality. This feature has been tested with a Meta Quest 3 headset and provides a way to visualize robot models in a 3D environment. WebXR requires a secure connection to function properly, which is why we use the Microsoft DevTunnel tool to create a secure tunnel to your local machine, which has the URDF file open. To start the WebXR Preview for a URDF file, you need to follow the steps outlined below. Microsoft DevTunnel is a tool that allows you to create secure tunnels to your local machine, enabling you to access local resources from remote devices, such as VR headsets. This is particularly useful for WebXR applications, which require HTTPS to function properly. Prerequisites A VR headset. The extension has been tested with the Meta Quest 3. Microsoft DevTunnel Tool Developer Tunnel Follow these steps: In any terminal, run the command devtunnel user login --github to start the developer tunnel. Log in with your GitHub account when prompted. This will authenticate you and allow you to create secure tunnels to your local machine. After logging in, run the command devtunnel host -p 3000 to create a tunnel. This will generate a URL that you can use to view the URDF from the VR headset in the next step. Type the Generated URL from the previous step into your headset's Web Browser. This will open the WebXR Preview page as a flat HTML page in your VR headset. Click on the WebXR Headset button in the lower right to enter the VR environment. This will load the URDF file in the VR headset. Future Work Support for more VR headsets. Support for more URDF features in the VR environment. Improved user interface for the WebXR Preview. Integration with other tools and services for a more seamless experience. Enhanced performance and stability for larger URDF files.","title":"WebXR Preview"},{"location":"WebXRPreview.html#webxr-urdf","text":"The Robot Developer Extension for URDF allows previewing a URDF file in Virtual Reality. This feature has been tested with a Meta Quest 3 headset and provides a way to visualize robot models in a 3D environment. WebXR requires a secure connection to function properly, which is why we use the Microsoft DevTunnel tool to create a secure tunnel to your local machine, which has the URDF file open. To start the WebXR Preview for a URDF file, you need to follow the steps outlined below. Microsoft DevTunnel is a tool that allows you to create secure tunnels to your local machine, enabling you to access local resources from remote devices, such as VR headsets. This is particularly useful for WebXR applications, which require HTTPS to function properly.","title":"WebXR URDF"},{"location":"WebXRPreview.html#prerequisites","text":"A VR headset. The extension has been tested with the Meta Quest 3. Microsoft DevTunnel Tool","title":"Prerequisites"},{"location":"WebXRPreview.html#developer-tunnel","text":"Follow these steps: In any terminal, run the command devtunnel user login --github to start the developer tunnel. Log in with your GitHub account when prompted. This will authenticate you and allow you to create secure tunnels to your local machine. After logging in, run the command devtunnel host -p 3000 to create a tunnel. This will generate a URL that you can use to view the URDF from the VR headset in the next step. Type the Generated URL from the previous step into your headset's Web Browser. This will open the WebXR Preview page as a flat HTML page in your VR headset. Click on the WebXR Headset button in the lower right to enter the VR environment. This will load the URDF file in the VR headset.","title":"Developer Tunnel"},{"location":"WebXRPreview.html#future-work","text":"Support for more VR headsets. Support for more URDF features in the VR environment. Improved user interface for the WebXR Preview. Integration with other tools and services for a more seamless experience. Enhanced performance and stability for larger URDF files.","title":"Future Work"},{"location":"mcp.html","text":"Model Context Protocol Support This extension implements a Model Context Protocol server which helps AI build URDF, Xacro and OpenSCAD models based on a high level description - by allowing it to check it's work visually when it makes modifications. Before engaging with the AI, start a preview window by using the command palette (Ctrl+Shift+P) and selecting \"URDF: Preview\". This will open a new tab where the AI can send model updates to be rendered. Things to try Simple Robot Arm Create a new file with a .urdf extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: ```Create a simple robot arm URDF model The robot arm should have a base, a shoulder joint, an elbow joint, and a wrist joint Each joint should have a range of motion The robot arm should be able to reach out and pick up objects The robot arm should be colored blue and white Make sure to include appropriate links and joints between the parts ### OpenScad Solar System Create a new file with a `.scad` extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: ```Create a simple solar system model in OpenSCAD. Since OpenSCAD is unitless, assume 1 unit = is 1mm for previewing, but internally scale such that 1 unit is 1 million kilometers. The model should include the sun, earth, and moon The sun should be a large yellow sphere The earth should be a smaller blue and green sphere orbiting the sun The moon should be a small gray sphere orbiting the earth Make sure to include appropriate scaling and positioning for the celestial bodies Xacro Car Create a new file with a .xacro extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: Create a simple car model in Xacro The car should have a body, four wheels, and a steering mechanism The car body should be red with black windows The wheels should be black with silver rims Make sure to include appropriate links and joints between the parts Notes The MCP server currently supports URDF, Xacro, and OpenSCAD file formats. The AI may need to iterate on the model multiple times to get it right. Feel free to ask it to make changes or fix issues. The preview window will automatically update whenever the AI sends a new model. If the AI generates invalid syntax, it may not be able to render the model. In this case, ask the AI to fix the syntax errors. The MCP server is a powerful tool, but it may not always produce perfect results. Use it as a starting point and refine the models as needed. The MCP server is still under development, so expect some rough edges. Feedback is welcome!","title":"Model Context Protocol"},{"location":"mcp.html#model-context-protocol-support","text":"This extension implements a Model Context Protocol server which helps AI build URDF, Xacro and OpenSCAD models based on a high level description - by allowing it to check it's work visually when it makes modifications. Before engaging with the AI, start a preview window by using the command palette (Ctrl+Shift+P) and selecting \"URDF: Preview\". This will open a new tab where the AI can send model updates to be rendered.","title":"Model Context Protocol Support"},{"location":"mcp.html#things-to-try","text":"","title":"Things to try"},{"location":"mcp.html#simple-robot-arm","text":"Create a new file with a .urdf extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: ```Create a simple robot arm URDF model The robot arm should have a base, a shoulder joint, an elbow joint, and a wrist joint Each joint should have a range of motion The robot arm should be able to reach out and pick up objects The robot arm should be colored blue and white Make sure to include appropriate links and joints between the parts ### OpenScad Solar System Create a new file with a `.scad` extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: ```Create a simple solar system model in OpenSCAD. Since OpenSCAD is unitless, assume 1 unit = is 1mm for previewing, but internally scale such that 1 unit is 1 million kilometers. The model should include the sun, earth, and moon The sun should be a large yellow sphere The earth should be a smaller blue and green sphere orbiting the sun The moon should be a small gray sphere orbiting the earth Make sure to include appropriate scaling and positioning for the celestial bodies","title":"Simple Robot Arm"},{"location":"mcp.html#xacro-car","text":"Create a new file with a .xacro extension. (Ctrl+Shift+P) and selecting \"URDF: Preview\". Now open the AI Chat Window and enter the following prompt: Create a simple car model in Xacro The car should have a body, four wheels, and a steering mechanism The car body should be red with black windows The wheels should be black with silver rims Make sure to include appropriate links and joints between the parts","title":"Xacro Car"},{"location":"mcp.html#notes","text":"The MCP server currently supports URDF, Xacro, and OpenSCAD file formats. The AI may need to iterate on the model multiple times to get it right. Feel free to ask it to make changes or fix issues. The preview window will automatically update whenever the AI sends a new model. If the AI generates invalid syntax, it may not be able to render the model. In this case, ask the AI to fix the syntax errors. The MCP server is a powerful tool, but it may not always produce perfect results. Use it as a starting point and refine the models as needed. The MCP server is still under development, so expect some rough edges. Feedback is welcome!","title":"Notes"},{"location":"tutorial.html","text":"Tutorial on Editing URDF files This tutorial will guide you through the process of editing URDF files using the Visual Studio Code URDF Editor. Prerequisites Visual Studio Code Visual Studio Code URDF Editor Step 1: Open a URDF file Open a URDF file in Visual Studio Code. You can create a new file or open an existing one. Step 2: Edit the URDF file Edit the URDF file using the Visual Studio Code URDF Editor. You can add, remove, or modify elements in the URDF file. Step 3: Preview the URDF file Right-click on the URDF file and select \"Preview URDF\" or press Ctrl+Shift+P and select \"Preview URDF\" to preview the URDF file in 3D. Step 4: Save the URDF file Save the URDF file after making changes to it. You can save the file by pressing Ctrl+S or selecting \"Save\" from the File menu. Conclusion Congratulations! You have successfully edited a URDF file using the Visual Studio Code URDF Editor. You can now create, edit, and preview URDF files for your robot projects.","title":"Tutorial"},{"location":"tutorial.html#tutorial-on-editing-urdf-files","text":"This tutorial will guide you through the process of editing URDF files using the Visual Studio Code URDF Editor.","title":"Tutorial on Editing URDF files"},{"location":"tutorial.html#prerequisites","text":"Visual Studio Code Visual Studio Code URDF Editor","title":"Prerequisites"},{"location":"tutorial.html#step-1-open-a-urdf-file","text":"Open a URDF file in Visual Studio Code. You can create a new file or open an existing one.","title":"Step 1: Open a URDF file"},{"location":"tutorial.html#step-2-edit-the-urdf-file","text":"Edit the URDF file using the Visual Studio Code URDF Editor. You can add, remove, or modify elements in the URDF file.","title":"Step 2: Edit the URDF file"},{"location":"tutorial.html#step-3-preview-the-urdf-file","text":"Right-click on the URDF file and select \"Preview URDF\" or press Ctrl+Shift+P and select \"Preview URDF\" to preview the URDF file in 3D.","title":"Step 3: Preview the URDF file"},{"location":"tutorial.html#step-4-save-the-urdf-file","text":"Save the URDF file after making changes to it. You can save the file by pressing Ctrl+S or selecting \"Save\" from the File menu.","title":"Step 4: Save the URDF file"},{"location":"tutorial.html#conclusion","text":"Congratulations! You have successfully edited a URDF file using the Visual Studio Code URDF Editor. You can now create, edit, and preview URDF files for your robot projects.","title":"Conclusion"}]}